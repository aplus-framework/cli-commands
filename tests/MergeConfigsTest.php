<?php
/*
 * This file is part of Aplus Framework Dev Commands Library.
 *
 * (c) Natan Felles <natanfelles@gmail.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
namespace Tests\CLI\Commands;

use Framework\Config\Config;
use Framework\Testing\TestCase;
use PHPUnit\Framework\Attributes\RunTestsInSeparateProcesses;

#[RunTestsInSeparateProcesses]
final class MergeConfigsTest extends TestCase
{
    protected function prepareDefaults() : void
    {
        $this->config = new Config([
            'console' => [
                'default' => [
                    'directories' => [
                        __DIR__ . '/../src',
                    ],
                ],
            ],
        ]);
        parent::prepareDefaults();
    }

    protected function makeDir(string $relativePath) : string
    {
        $dir = __DIR__ . \DIRECTORY_SEPARATOR . $relativePath;
        return \str_replace(' ', '\ ', $dir);
    }

    protected function runCli(string $relativePath, string $append = '') : void
    {
        $dir = $this->makeDir($relativePath);
        $append = $append !== '' ? ' ' . $append : '';
        $this->app->runCli('mergeconfigs ' . $dir . $append);
    }

    public function testNoDir() : void
    {
        $this->app->runCli('mergeconfigs');
        self::assertStdoutContains('<?php');
    }

    public function testCustomExtension() : void
    {
        $this->app->runCli('mergeconfigs --extension=.php');
        self::assertStdoutContains('<?php');
    }

    public function testInvalidDir() : void
    {
        $this->expectException(\RuntimeException::class);
        $path = $this->makeDir('foo');
        $this->expectExceptionMessage('Config directory "' . $path . '" does not exist');
        $this->runCli('foo');
    }

    public function testEmptyDir() : void
    {
        $this->runCli('configs/empty-dir');
        self::assertStdoutContains('<?php');
        self::assertStdoutContains('// Do not edit this file. It is created automatically.');
        self::assertStdoutContains('return array (');
        self::assertStdoutContains(');');
        self::assertStdoutNotContains("'bar' =>");
    }

    public function testOk() : void
    {
        $this->runCli('configs/ok');
        self::assertStdoutContains('<?php');
        self::assertStdoutContains('// Do not edit this file. It is created automatically.');
        self::assertStdoutContains('return array (');
        self::assertStdoutContains("'bar' =>");
        self::assertStdoutContains("'key' => 'value'");
        self::assertStdoutContains("'other' =>");
        self::assertStdoutContains("'foo' => 'baz'");
        self::assertStdoutContains(');');
    }

    public function testNotArray() : void
    {
        $this->expectException(\RuntimeException::class);
        $path = \realpath(__DIR__ . '/configs/not-array/foo.php');
        $this->expectExceptionMessage('Config file "' . $path . '" does not return an array');
        $this->runCli('configs/not-array');
    }

    public function testNotArrayWithIgnore() : void
    {
        $this->runCli('configs/not-array', '-i');
        self::assertStdoutContains('<?php');
    }

    public function testEmptyArray() : void
    {
        $this->expectException(\RuntimeException::class);
        $path = \realpath(__DIR__ . '/configs/empty-array/foo.php');
        $this->expectExceptionMessage('Config file "' . $path . '" return an empty array');
        $this->runCli('configs/empty-array');
    }

    public function testEmptyArrayWithIgnore() : void
    {
        $this->runCli('configs/empty-array', '-i');
        self::assertStdoutContains('<?php');
    }

    public function testInvalidKeys() : void
    {
        $this->expectException(\RuntimeException::class);
        $path = \realpath(__DIR__ . '/configs/invalid-keys/foo.php');
        $this->expectExceptionMessage('Config file "' . $path . '" return invalid keys (must be strings)');
        $this->runCli('configs/invalid-keys');
    }

    public function testInvalidKeysWithIgnore() : void
    {
        $this->runCli('configs/invalid-keys', '-i');
        self::assertStdoutContains('<?php');
    }

    public function testInvalidValues() : void
    {
        $this->expectException(\RuntimeException::class);
        $path = \realpath(__DIR__ . '/configs/invalid-values/foo.php');
        $this->expectExceptionMessage('Config file "' . $path . '" return invalid values (must be arrays)');
        $this->runCli('configs/invalid-values');
    }

    public function testInvalidValuesWithIgnore() : void
    {
        $this->runCli('configs/invalid-values', '-i');
        self::assertStdoutContains('<?php');
    }
}
